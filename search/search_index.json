{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"awl-python","text":"<p>Python implementation of the Abstract Workflow Language (AWL / AWL-LD)</p>"},{"location":"#install","title":"Install","text":"<p><code>pip install awl</code></p>"},{"location":"#usage","title":"Usage","text":"<pre><code>from awl import AstSerialization\n\nast_serialization = AstSerialization()\n\n# python source code example\nsource = \"\"\"if a == 1:\nb = 1\nelse:\nb = 'test'\"\"\"\n\n# generate ast document\nast_dict = ast_serialization.parse(source)\nprint(ast_serialization.dumps())\n\n# regenerate source code\nsrc_code = ast_serialization.unparse(ast_dict)\nassert src_code == source\n\n# manipulate ast_dict: set b = 2\nast_dict[\"body\"][0][\"body\"][0][\"value\"][\"value\"] = 2\nsrc_code = ast_serialization.unparse(ast_dict)\n\nassert src_code == \"\"\"if a == 1:\nb = 2\nelse:\nb = 'test'\"\"\"\n\n# export as json-ld\njsonld_doc = ast_serialization.to_jsonld()\n\n# import into a graph\nfrom rdflib import Graph\ng = Graph()\ng.parse(data=jsonld_doc, format=\"json-ld\")\n\n# dump graph as turtle\nprint(g.serialize(format=\"turtle\"))\n\n# query for all possible values of b\nqres = g.query(\n    \"\"\"\n    PREFIX awl: &lt;https://oo-ld.github.io/awl-schema/&gt;\n    PREFIX ex: &lt;https://example.org/&gt;\n    SELECT ?v\n    WHERE {\n        ?a a awl:Assign .\n        ?a awl:HasTarget ex:b .\n        ?a awl:HasValue ?v .\n    }\n    \"\"\"\n)\n\npossible_values = [row[0].toPython() for row in qres]\nassert possible_values == [1, \"test\"]\n</code></pre>"},{"location":"awl/","title":"Awl","text":"<p>Classes</p>"},{"location":"awl/#astserialization","title":"AstSerialization","text":"Source code in <code>src/awl/core.py</code> <pre><code>class AstSerialization:\n    def __init__(self):\n        pass\n\n    @staticmethod\n    def del_keys(d: dict, keys: list) -&gt; dict:\n        for key in keys:\n            if key in d:\n                del d[key]\n        for key, value in d.items():\n            if isinstance(value, dict):\n                AstSerialization.del_keys(value, keys)\n            elif isinstance(value, list):\n                for item in value:\n                    if isinstance(item, dict):\n                        AstSerialization.del_keys(item, keys)\n        return d\n\n    @staticmethod\n    def add_key(d: dict, k: str, v) -&gt; dict:\n        d[k] = v\n        for key, value in d.items():\n            if isinstance(value, dict):\n                AstSerialization.add_key(value, k, v)\n            elif isinstance(value, list):\n                for item in value:\n                    if isinstance(item, dict):\n                        AstSerialization.add_key(item, k, v)\n        return d\n\n    def parse(self, source: str) -&gt; dict:\n        ast_dict = ast2json(ast.parse(source))\n\n        rm_keywords = [\n            \"col_offset\",\n            \"end_col_offset\",\n            \"end_lineno\",\n            \"lineno\",\n            \"type_comment\",\n            \"n\",\n            \"s\",\n            \"kind\",\n            \"ctx\",\n        ]\n\n        ast_dict = self.del_keys(ast_dict, rm_keywords)  # remove annotations\n        self.ast_dict = ast_dict\n        return ast_dict\n\n    def unparse(self, ast_dict: dict = None) -&gt; str:\n        ast_dict = self.add_key(ast_dict, \"lineno\", 0)  # needed to unparse\n        ast_tree = json2ast(ast_dict)\n        source = ast.unparse(ast_tree)\n        return source\n\n    def dumps(self, format=\"yaml\") -&gt; str:\n        res = \"\"\n        if format == \"json\":\n            res = json.dumps(self.ast_dict, indent=4)\n        elif format == \"yaml\":\n            res = yaml.dump(self.ast_dict, indent=4)\n        return res\n\n    def to_jsonld(self) -&gt; dict:\n        res = {\"@context\": jsonld_context.awl_context[\"@context\"], **self.ast_dict}\n        return res\n</code></pre>"},{"location":"dev/","title":"Setup","text":"<ol> <li>create a virtual environment</li> </ol> <pre><code>python -m venv .venv\n</code></pre> <ol> <li>install requirements + extras</li> </ol> <pre><code>pip install -e .[dev,testing]\n</code></pre>"},{"location":"dev/#testing","title":"Testing","text":"<ol> <li> <p>Create new test (file name test_*.py) under /tests</p> </li> <li> <p>Run pytest in the project root dir</p> </li> </ol> <pre><code>tox -e test\n</code></pre>"}]}